schema {
  query: Query
  mutation: MyMutation
}

type Admin implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  email: String!
  password: String!
}

type AdminConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AdminEdge]!
}

"""A Relay edge containing a `Admin` and its cursor."""
type AdminEdge {
  """The item at the end of the edge"""
  node: Admin

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum AdminSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_ASC
  PASSWORD_DESC
}

type CreateAdmin {
  admin: Admin
}

input CreateAdminInput {
  token: String!
}

type CreateSubject {
  subject: Subject
}

input CreateSubjectInput {
  name: String!
}

type MyMutation {
  createAdmin(adminData: CreateAdminInput!): CreateAdmin
  createSubject(subjectData: CreateSubjectInput!): CreateSubject
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """The ID of the object"""
  node(id: ID!): Node
  viewer: Viewer
}

type Subject implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
}

type SubjectConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubjectEdge]!
}

"""A Relay edge containing a `Subject` and its cursor."""
type SubjectEdge {
  """The item at the end of the edge"""
  node: Subject

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum SubjectSortEnum {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
}

type Viewer {
  allAdmins(sort: [AdminSortEnum], before: String, after: String, first: Int, last: Int): AdminConnection
  allSubjects(sort: [SubjectSortEnum], before: String, after: String, first: Int, last: Int): SubjectConnection
}

